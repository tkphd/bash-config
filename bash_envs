#!/usr/bin/env bash
# === Manage search paths ===
export PATH=${PATH}:/usr/local/bin:$HOME/research/projects/mmsp/utility
if [[ ${LD_LIBRARY_PATH} == "" ]]; then
    export LD_LIBRARY_PATH=/usr/lib/paraview
else
    export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/lib/paraview
fi
if [[ -d ${HOME}/bin ]];then
    export PATH=${PATH}:${HOME}/bin
fi
if [[ -d /usr/local/${USER} ]]; then
    export PATH=${PATH}:/usr/local/${USER}/bin
fi
# === AUR ===
export gaur="https://aur.archlinux.org"
# === BeeGFS ===
if [[ -d /opt/beegfs ]]; then
    export PATH=${PATH}:/opt/beegfs/sbin
fi
# === Conda ===
if [[ -f ${HOME}/.bash.d/conda.sh ]]; then
    . ${HOME}/.bash.d/conda.sh
fi
# === CUDA ===
# See https://arnon.dk/matching-sm-architectures-arch-and-gencode-for-various-nvidia-cards/
if [[ $(hostname -s) == "p859561" ]]; then
    export CUDARCH=sm_35
elif [[ $(hostname -s) == "rgpu3" ]]; then
    export CUDARCH=sm_60
else
    export CUDARCH=sm_50
fi
if [[ ${CUDA_HDR_PATH} == "" ]]; then
    NVCCBIN=$(dirname $(ls -t $(find /usr/local/cuda* -name nvcc 2>/dev/null) 2>/dev/null | head -n 1))
    if [[ $NVCCBIN != "" ]]; then
        export PATH=${PATH}:${NVCCBIN}
        export CUDA_HDR_PATH=$(dirname ${NVCCBIN})/targets/x86_64-linux/include
        export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$(dirname ${CUDA_HDR_PATH}/lib)
    fi
    if [[ $CUDA_HDR_PATH == "" ]]; then
        NVCCBIN=$(dirname $(ls -t $(find /opt/cuda -name nvcc 2>/dev/null) 2>/dev/null | head -n 1))
        if [[ $NVCCBIN != "" ]]; then
            export PATH=${PATH}:${NVCCBIN}
            export CUDA_HDR_PATH=$(dirname ${NVCCBIN})/targets/x86_64-linux/include
            export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$(dirname ${CUDA_HDR_PATH}/lib)
        fi
    fi
    if [[ $CUDA_HDR_PATH == "" ]]; then
        export CUDA_HDR_PATH=/usr/include
    fi
fi
# === Emacs ===
export ALTERNATE_EDITOR=""
export EDITOR="/usr/bin/emacsclient -nw"
export VISUAL="/usr/bin/emacsclient -nw"
export TERMINAL=/usr/bin/konsole
export EMACSD=/tmp/emacs-${USER}
export EMACSBD=${EMACSD}/backups
export EMACSSD=${EMACSD}/saves
if [[ ! -d $EMACSD ]]; then
    mkdir -p $EMACSD
    mkdir -p $EMACSBD
    mkdir -p $EMACSSD
fi
# === GCC ===
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'
# === KDE ===
export KDE_FULL_SESSION=false
export KDEWM=/usr/bin/i3
# === MMSP ===
export MMSP_PATH=${HOME}/research/projects/mmsp
export PATH=${PATH}:${MMSP_PATH}/utility
# === NIX ===
if [[ -d ${HOME}/.nix-profile/etc/profile.d ]]; then
    . ${HOME}/.nix-profile/etc/profile.d/nix.sh
fi
# OpenARC (Accelerator Research Compiler)
if [[ -d ${HOME}/repositories/OpenARC/ ]]; then
    export openarc=${HOME}/repositories/OpenARC
fi
# === PGI ===
if [[ -f /opt/pgi/license.dat ]]; then
    export PGI_PATH=/opt/pgi
    export LM_LICENSE_FILE=/opt/pgi/license.dat
    export PATH=${PATH}:/opt/pgi/linux86-64/$(ls -r -1 /opt/pgi/linux86-64 | head -n 1)/bin
elif [[ -f /usr/local/pgi/license.dat ]]; then
    export PGI_PATH=/usr/local/pgi
    export LM_LICENSE_FILE=/usr/local/pgi/license.dat
    export PATH=${PATH}:/usr/local/pgi/linux86-64/2016/bin
fi
# === Qt ===
if [[ -d /usr/local/lib/plugins ]]; then
    export QT_QPA_PLATFORM_PLUGIN_PATH=/usr/local/lib/plugins
fi
# === Quartus ===
if [[ -d /opt/intelFPGA_lite/18.1/quartus/bin ]]; then
    export PATH=${PATH}:/opt/intelFPGA_lite/18.1/quartus/bin:/opt/intelFPGA/18.1/qprogrammer/bin
fi
# === Ruby ===
if [[ -d ${HOME}/gems ]]; then
    export GEM_HOME=${HOME}/gems
    export PATH=${HOME}/gems/bin:${PATH}
fi
# === SSH ===
export SSH_ASKPASS=/usr/bin/ssh-askpass

# === Machine-specific Tasks ===
if [[ $(hostname -s) == "p859561" ]]; then
    unset MAIL
    export CHROME_CONFIG_HOME=/usr/local/${USER}
    export CHROME_USER_DATA_HOME=/usr/local/${USER}/google-chrome
    export AMGX_DIR=/usr/local/${USER}/opt/AMGX
    export GSL_PATH=${HOME}/.conda/envs/mmsp/include
    export MPI_PATH=${HOME}/.conda/envs/mmsp/include
    export LIBGL_ALWAYS_INDIRECT=1
fi
if [[ -f ${HOME}/.bash.d/tokens ]]; then
    . ${HOME}/.bash.d/tokens
fi
